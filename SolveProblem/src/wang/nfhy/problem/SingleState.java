package wang.nfhy.problem;

import java.util.List;

public abstract class SingleState {
  
  protected String uniqueId;
  
  protected SingleState parent;
  
  //public abstract boolean compare();
  
  /**.
   * generate the uniqueId as key<br>
   * depends on your problem modeling
   * @return uniqueId
   */
  public abstract void generateUniqueId();
  
  public String getUniqueId() {
    return this.uniqueId;
  }
  
  /**.
   * return all the possible incoming states of present states
   * @return all states incoming
   */
  public abstract SingleState[] next();
  
  /**.
   * when find one solution,trace the link generated by {@link #next} back to the start state
   * @return the state list from target back to start
   */
  public abstract List<? extends SingleState> traceBackToStart();
  
  /**.
   * this function calculates the cost from start to this state.<br>
   * it can be useful when there are more than one solution and you want the best<br>
   * or there are two parents can reach this state and the worse one should be abandoned
   * @return the cost of the solution
   */
  public abstract int traceBackCost();
  
  /**.
   * first added then hesitate , remove it temporarily
   */
  /*
  @Override
  public boolean equals(Object obj) {
    if (obj instanceof SingleState) {
      return ((SingleState)obj).uniqueId.equals(this.uniqueId);
    }
    return false;
  }*/
  
}
